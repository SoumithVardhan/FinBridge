version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: finbridge_postgres
    environment:
      POSTGRES_USER: finbridge_user
      POSTGRES_PASSWORD: finbridge_secure_2024
      POSTGRES_DB: finbridge_production
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - finbridge_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U finbridge_user -d finbridge_production"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: finbridge_redis
    command: redis-server --appendonly yes --requirepass finbridge_redis_2024
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - finbridge_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "finbridge_redis_2024", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: finbridge_backend
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://finbridge_user:finbridge_secure_2024@postgres:5432/finbridge_production?schema=public
      REDIS_URL: redis://:finbridge_redis_2024@redis:6379
      JWT_ACCESS_SECRET: finbridge_production_jwt_access_secret_ultra_secure_2024
      JWT_REFRESH_SECRET: finbridge_production_jwt_refresh_secret_ultra_secure_2024
      JWT_ACCESS_EXPIRES_IN: 15m
      JWT_REFRESH_EXPIRES_IN: 7d
      BCRYPT_SALT_ROUNDS: 12
      CORS_ORIGIN: http://localhost:3000
      LOG_LEVEL: info
      SWAGGER_ENABLED: true
    ports:
      - "5001:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - finbridge_network
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    restart: unless-stopped

  frontend:
    build:
      context: .
      dockerfile: frontend.Dockerfile
    container_name: finbridge_frontend
    environment:
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - finbridge_network
    restart: unless-stopped

  adminer:
    image: adminer:latest
    container_name: finbridge_adminer
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - finbridge_network
    restart: unless-stopped

  mailhog:
    image: mailhog/mailhog:latest
    container_name: finbridge_mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - finbridge_network
    restart: unless-stopped

networks:
  finbridge_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  backend_uploads:
  backend_logs:
