version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: finbridge_postgres_dev
    environment:
      POSTGRES_DB: finbridge_dev
      POSTGRES_USER: finbridge
      POSTGRES_PASSWORD: finbridge_dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
    networks:
      - finbridge_dev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U finbridge -d finbridge_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: finbridge_redis_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - finbridge_dev_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Backend API (Development)
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    container_name: finbridge_backend_dev
    environment:
      - NODE_ENV=development
      - PORT=5000
      - DATABASE_URL=postgresql://finbridge:finbridge_dev_password@postgres:5432/finbridge_dev?schema=public
      - REDIS_URL=redis://redis:6379
      - JWT_ACCESS_SECRET=finbridge_jwt_access_secret_key_2024_dev
      - JWT_REFRESH_SECRET=finbridge_jwt_refresh_secret_key_2024_dev
      - JWT_ACCESS_EXPIRES_IN=15m
      - JWT_REFRESH_EXPIRES_IN=7d
      - BCRYPT_SALT_ROUNDS=12
      - CORS_ORIGIN=http://localhost:5173,http://localhost:3000
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - LOG_LEVEL=debug
      - SWAGGER_ENABLED=true
    ports:
      - "5001:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - finbridge_dev_network
    volumes:
      - ./server:/app
      - /app/node_modules
      - /app/dist
      - backend_dev_uploads:/app/uploads
      - backend_dev_logs:/app/logs
    command: sh -c "npx prisma generate && npx prisma db push && npm run dev"

  # Frontend React App (Development)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: finbridge_frontend_dev
    environment:
      - VITE_API_URL=http://localhost:5001/api
      - VITE_APP_NAME=FinBridge Dev
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "5173:5173"
    depends_on:
      - backend
    networks:
      - finbridge_dev_network
    volumes:
      - .:/app
      - /app/node_modules
      - /app/dist
    command: sh -c "npm run dev -- --host 0.0.0.0"

  # Database Admin
  adminer:
    image: adminer:latest
    container_name: finbridge_adminer_dev
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - finbridge_dev_network

volumes:
  postgres_dev_data:
  redis_dev_data:
  backend_dev_uploads:
  backend_dev_logs:

networks:
  finbridge_dev_network:
    driver: bridge
